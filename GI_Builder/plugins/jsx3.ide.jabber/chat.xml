<!--
  ~ Copyright (c) 2001-2014, TIBCO Software Inc.
  ~ Use, modification, and distribution subject to terms of license.
  -->
<serialization xmlns="urn:tibco.com/v3.0">
  <onAfterDeserialize><![CDATA[

objJSX.initializeTitle = function(buddy) {
  this.contactName = buddy.name||buddy.jid;
  windowBar.setText("Chat with " + this.contactName, true);

  this._initializeConvArea = true;

  var df = jsx3.util.DateFormat;

  this.date_format = df.getDateTimeInstance(df.SHORT, df.SHORT);
};

objJSX.onNewMessage = function(instance, msg) {
  if (!this.chatInstance || this.chatInstance.chatid != instance.chatid) {
    this.chatInstance = instance;
  }
  if (msg) {
    this.displayMessage(msg);
  }
};

objJSX.showLast = function() {
  var objGUIMain = jsxconversationarea.getRendered();
  var objGUI = objGUIMain.firstChild.firstChild && String(objGUIMain.firstChild.firstChild.tagName).toLowerCase() == "tbody" ?
      objGUIMain.firstChild.firstChild : objGUIMain.firstChild;

  if (!this._scrollTOID && objGUI.lastChild &&
       (objGUIMain.scrollTop >= objGUI.lastChild.offsetTop - parseInt(objGUIMain.style.height) - 2 * objGUI.lastChild.offsetHeight)) {
    this._scrollTOID = window.setTimeout(jsx3.$F(function() {
      this._scrollTOID = null;

      if (objGUI && objGUI.lastChild)
        objGUIMain.scrollTop = objGUI.lastChild.offsetTop;
    }).bind(this), 200);
  }
};

objJSX.displayMessage = function(msg, ci) {
  var cameIn = ci || new Date();
  var scrollToLast = true;

  var convArea = jsxconversationarea.getRendered();

  var self = this;
  var processMessageLog = function() {
    self._msgLogTO = null;
    
    var convArea = jsxconversationarea.getRendered();
    if (!convArea) {
      self._msgLogTO = window.setTimeout(jsx3.$F(function() {
        processMessageLog();
      }), 200);
    } else {
      var m;
      while(m = self._msgLog.shift()) {
        self.displayMessage(m.msg, m.cameIn);
      }
      self._msgLog = null;
    }
  };

  if (!convArea) {
    if (!this._msgLog) {
      this._msgLog = [];
    }
    this._msgLog.push({ cameIn: cameIn, msg: msg });
    if (this._msgLogTO) {
      return;
    }

    this._msgLogTO = window.setTimeout(jsx3.$F(function() {
      processMessageLog();
    }), 200);
    return;
  }

  if (!convArea.firstChild)
    convArea.innerHTML = "<table></table>";

  var thisName = msg.from ? this.contactName : 'Me';
  // support IE TBODY and others
  var parentElm = convArea.firstChild.firstChild && String(convArea.firstChild.firstChild.tagName).toLowerCase() == "tbody" ?
      convArea.firstChild.firstChild : convArea.firstChild;

  var tr = document.createElement("tr");
  var td1 = document.createElement("td");
  td1.className = "name";
  if (thisName != this._lastName)
    td1.innerHTML = jsx3.util.strTruncate(thisName, 15);
  var td2 = document.createElement("td");
  td2.className = "message";
  td2.innerHTML = msg.body;
  var td3 = document.createElement("td");
  td3.className = "date";
  td3.innerHTML = this.date_format.format(cameIn);

  tr.appendChild(td1); tr.appendChild(td2); tr.appendChild(td3);
  parentElm.appendChild(tr);

  this._lastName = thisName;

  this.showLast();
};

objJSX.sendMessage = function(evt) {
  if (evt) {
    if (!evt.enterKey() || evt.shiftKey()) {
      return;
    }
    evt.cancelKey();
    evt.cancelReturn();
    evt.cancelBubble();
  }
  try {
    var txt = jsxchatarea.getValue();
    txt = txt.replace(/\n/g, '<br/>');
    this.chatInstance.sendMessage({ body: txt });
    this.displayMessage({ body: txt });
    
    jsxchatarea.setValue('', true);
    this._updateBtnState("");
  } catch(e) {}
};

objJSX._updateBtnState = function(msg) {
  jsxsend.setEnabled(msg.length > 0, true);
};

  ]]></onAfterDeserialize>
  <object type="jsx3.gui.Dialog">
    <variants jsxwidth="431" jsxheight="318" jsxwindowstate="1" jsxleft="70" jsxtop="26"/>
    <strings jsxname="jsx_chat_dialog"/>
    <dynamics jsxbgcolor="@Solid Medium"/>
    <object type="jsx3.gui.WindowBar">
      <variants/>
      <strings jsxname="windowBar" jsxtext="[Caption]"/>
      <object type="jsx3.gui.ToolbarButton">
        <variants/>
        <strings jsxname="btnMinimize"/>
        <dynamics jsximage="@Min Icon" jsxtip="jsx3.gui.Dialog.min"/>
        <events jsxexecute="this.getAncestorOfType(jsx3.gui.Dialog).doToggleState();"/>
      </object>
      <object type="jsx3.gui.ToolbarButton">
        <variants/>
        <strings jsxname="btnMaximize"/>
        <dynamics jsximage="@Max Icon" jsxtip="jsx3.gui.Dialog.max"/>
        <events jsxexecute="this.getAncestorOfType(jsx3.gui.Dialog).doMaximize(this);"/>
      </object>
      <object type="jsx3.gui.ToolbarButton">
        <variants/>
        <strings jsxname="btnClose"/>
        <dynamics jsximage="@Close Icon" jsxtip="jsx3.gui.Dialog.close"/>
        <events jsxexecute="this.getAncestorOfType(jsx3.gui.Dialog).doClose();"/>
      </object>
    </object>
    <object type="jsx3.gui.Block">
      <variants jsxoverflow="3" jsxloadtype="1"/>
      <strings jsxname="block" jsxwidth="100%" jsxheight="100%" jsxrelativeposition="1"/>
      <object type="jsx3.gui.LayoutGrid">
        <variants/>
        <strings jsxrows="*,40"/>
        <object type="jsx3.gui.Block">
          <variants jsxoverflow="1" jsxpadding="4"/>
          <strings jsxname="jsxconversationarea" jsxwidth="100%" jsxheight="100%" jsxrelativeposition="1" jsxclassname="chatdialog"/>
          <dynamics jsxbgcolor="@Solid Light"/>
        </object>
        <object type="jsx3.gui.Block">
          <variants jsxoverflow="3"/>
          <strings jsxname="paneBottom" jsxwidth="100%" jsxheight="100%" jsxpadding="4 8 4 8" jsxborder="1px solid #585865;none;none;none"/>
          <dynamics jsxbgcolor="@Solid Shadow"/>
          <object type="jsx3.gui.LayoutGrid">
            <variants jsxrelativeposition="0" jsxleft="0" jsxtop="0" jsxoverflow="2"/>
            <strings jsxname="layoutRows" jsxcols="*,65" jsxwidth="100%" jsxheight="100%"/>
            <object type="jsx3.gui.Block">
              <strings jsxname="pane1" jsxwidth="100%" jsxheight="100%"/>
              <object type="jsx3.gui.TextBox">
                <variants jsxtype="1" jsxenabled="1"/>
                <strings jsxwidth="100%" jsxheight="100%" jsxname="jsxchatarea" jsxmargin="0" jsxborder="none" jsxvalue=""/>
                <events jsxkeypress="jsx_chat_dialog.sendMessage(objEVENT);" jsxincchange="jsx_chat_dialog._updateBtnState(strVALUE);"/>
              </object>
            </object>
            <object type="jsx3.gui.Block">
              <variants jsxoverflow="1"/>
              <strings jsxname="pane2" jsxwidth="100%" jsxheight="100%" jsxtextalign="center" jsxfontweight="bold" jsxpadding="6 0 0 8"/>
              <object type="jsx3.gui.Button">
                <variants jsxindex="0" jsxheight="19"/>
                <strings jsxname="jsxsend" jsxtext="Send" jsxtextalign="center" jsxenabled="0" jsxwidth="100%"/>
                <events jsxexecute="jsx_chat_dialog.sendMessage();"/>
              </object>
            </object>
          </object>
        </object>
      </object>
    </object>
  </object>
</serialization>
